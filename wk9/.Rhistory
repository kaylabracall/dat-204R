obj <- 7
obj <- 7
hist(obj2)
obj2 <- [7:16]
obj2 <- 7:16
hist(obj2)
(4^2 +9)/(13*2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a = (4^2 +9)/(13*2)
a <-  (4^2 +9)/(13*2)
a
q
b
b <- (18+sqrt(4 + 9^3)-9)/ (cuberoot(9))
b <- (18+sqrt(4 + 9^3)-9)/ (9^(1/3)))
b <- (18+sqrt(4 + 9^3)-9)/(9^(1/3))
b
c <- ((5/4)+37-8^3)/(sqrt(5)/(37+9))
c
unweighted_die <- c(1:4, 6, 6)
unweighted_die
#Question 2
roll_dice_function <- function(){
die_1 <- c(1:4, 6, 6)
die_2 <- 1:8
sample(die_1, 1)
}
roll_dice_function
roll_dice_function
roll_dice_function()
roll_dice_function()
#Question 2
roll_dice_function <- function(){
die_1 <- c(1:4, 6, 6)
die_2 <- 1:8
#sample(die_1, 1)
sample(die_2, 1, prob = c(1/12, 1/12, 1/12, 1/12, 1/12, 1/12, 2/12, 4/12))
}
roll_dice_function()
roll_dice_function()
roll_dice_function()
hist(roll_dice_function())
weighted_rolls <- replicate(1000, roll_dice_function())
hist(weighted_rolls)
#Question 2
roll_dice_function <- function(){
die_1 <- c(1:4, 6, 6)
die_2 <- 1:8
sample(die_1, 1) + sample(die_2, 1, prob = c(1/12, 1/12, 1/12, 1/12, 1/12, 1/12, 2/12, 4/12))
}
roll_dice_function()
die_2
die_2 <- 1:8
#Question 2
die_1 <- c(1:4, 6, 6)
die_2 <- 1:8
roll_dice_function <- function(){
sample(die_1, 1) + sample(die_2, 1, prob = c(1/12, 1/12, 1/12, 1/12, 1/12, 1/12, 2/12, 4/12))
}
roll_dice_function()
roll_dice_function()
roll_dice_function()
replicate(3, roll_dice_function())
rolls <- replicate(3, roll_dice_function())
rolls
?replicate
roll_dice_function <- function(){
sample(die_1, 1) + sample(die_2, 1, prob = c(1/12, 1/12, 1/12, 1/12, 1/12, 1/12, 2/12, 4/12))
}
roll_dice_function()
rolls <- replicate(3, roll_dice_function())
rolls
rolls
rolls
rolls <- replicate(3, roll_dice_function())
rolls
prob
setwd("C:/Users/kaybr/DAT204/dat-204R/final")
knitr::opts_chunk$set(echo = TRUE)
kane <- read.csv("kane.csv", stringsAsFactors=FALSE)
head(kane)
library(stringr)
library(stringr) #import stringr for later use
pat <- (kane$patient_count)
pat
library(stringr) #import stringr for later use
pat <- (kane$patient_count) #pull out patients into vector
mean(pat, na.rm = TRUE)
library(stringr) #import stringr for later use
pat <- (kane$patient_count) #pull out patients into vector
#  let's run some statistics
mean <- mean(pat, na.rm = TRUE)
median <- median(pat, na.rm = TRUE)
mode <- mode(pat, na.rm = TRUE)
library(stringr) #import stringr for later use
pat <- (kane$patient_count) #pull out patients into vector
#  let's run some statistics
mean <- mean(pat, na.rm = TRUE)
median <- median(pat, na.rm = TRUE)
mode <- mode(pat)
library(stringr) #import stringr for later use
pat <- (kane$patient_count) #pull out patients into vector
#  let's run some statistics
mean <- mean(pat, na.rm = TRUE)
median <- median(pat, na.rm = TRUE)
mode <- mode(pat)
print(mean)
print(median)
print(mode)
library(stringr) #import stringr for later use
pat <- (kane$patient_count) #pull out patients into vector
#  let's run some statistics
mean <- mean(pat, na.rm = TRUE)
median <- median(pat, na.rm = TRUE)
mode <- getmode(pat, na.rm = TRUE)
library(stringr) #import stringr for later use
pat <- (kane$patient_count) #pull out patients into vector
#  let's run some statistics
mean <- mean(pat, na.rm = TRUE)
median <- median(pat, na.rm = TRUE)
print(mean)
print(median)
library(stringr) #import stringr for later use
pat <- (kane$patient_count) #pull out patients into vector
#  let's run some statistics
mean <- mean(pat, na.rm = TRUE)
median <- median(pat, na.rm = TRUE)
max <- max(pat, na.rm = TRUE)
print(mean)
print(median)
print(max)
library(stringr) #import stringr for later use
pat <- (kane$patient_count) #pull out patients into vector
#  let's run some statistics
mean <- mean(pat, na.rm = TRUE)
median <- median(pat, na.rm = TRUE)
max <- max(pat, na.rm = TRUE)
min <- min(pat, na.rm = TRUE)
print(mean)
print(median)
print(max)
print(min)
library(stringr) #import stringr for later use
pat <- (kane$patient_count) #pull out patients into vector
#  let's run some statistics
mean <- mean(pat, na.rm = TRUE)
median <- median(pat, na.rm = TRUE)
max <- max(pat, na.rm = TRUE)
min <- min(pat, na.rm = TRUE)
print('The average patient count across all facilities is', mean, ".")
library(stringr) #import stringr for later use
pat <- (kane$patient_count) #pull out patients into vector
#  let's run some statistics
mean <- mean(pat, na.rm = TRUE)
median <- median(pat, na.rm = TRUE)
max <- max(pat, na.rm = TRUE)
min <- min(pat, na.rm = TRUE)
print('The average patient count across all facilities is', mean)
library(stringr) #import stringr for later use
pat <- (kane$patient_count) #pull out patients into vector
#  let's run some statistics
mean <- mean(pat, na.rm = TRUE)
median <- median(pat, na.rm = TRUE)
max <- max(pat, na.rm = TRUE)
min <- min(pat, na.rm = TRUE)
print('The average patient count across all facilities is:')
print(mean)
print(median)
print(max)
print(min)
facilities <- unique(kane$facility)
facilities <- unique(kane$facility)
facilities
facilities <- unique(kane$facility)
facilities
fac1_tf <- str_detect(kane$facility, "1")
facilities <- unique(kane$facility)
facilities
fac1_tf <- str_detect(kane$facility, "1")
fac1 <- kane[fac1_tf, ]
facilities <- unique(kane$facility)
facilities
fac1_tf <- str_detect(kane$facility, "1")
fac1 <- kane[fac1_tf, ]
head(fac1)
facilities <- unique(kane$facility)
facilities
fac1_tf <- str_detect(kane$facility, "1")
fac1 <- kane[fac1_tf, ]
# head(fac1)
fac2_tf <- str_detect(kane$facility, "2")
fac2 <- kane[fac2_tf, ]
fac3_tf <- str_detect(kane$facility, "3")
fac3 <- kane[fac3_tf, ]
fac4_tf <- str_detect(kane$facility, "4")
fac4 <- kane[fac4_tf, ]
mean(fac1$patient_count, na.rm = TRUE)
pat <- (kane$patient_count) #pull out patients into vector
#  let's run some statistics on patients across all facilities
mean <- mean(pat, na.rm = TRUE)
median <- median(pat, na.rm = TRUE)
max <- max(pat, na.rm = TRUE)
min <- min(pat, na.rm = TRUE)
print(mean)
print(median)
print(max)
print(min)
avg_patient <- c(mean(fac1$patient_count, na.rm = TRUE), mean(fac2$patient_count, na.rm = TRUE), mean(fac3$patient_count, na.rm = TRUE), mean(fac4$patient_count, na.rm = TRUE))
avg_patient
avg_patient <- c(mean(fac1$patient_count, na.rm = TRUE), mean(fac2$patient_count, na.rm = TRUE), mean(fac3$patient_count, na.rm = TRUE), mean(fac4$patient_count, na.rm = TRUE))
avg_patient # average patient counts for each facility
max(avg_patient)
ggplot(data = avg_patient)
# import librarbies for future use
library(stringr)
library(ggplot2)
# read in csv file
kane <- read.csv("kane.csv", stringsAsFactors=FALSE)
head(kane)
ggplot(data = avg_patient)
ggplot(data = kane$patient_count)
ggplot(data = kane)
ggplot(data = kane, aes(x= patient_count)
ggplot(data = kane, aes(x= patient_count))
demographics <- unique(kane$race)
demographics <- unique(kane$race)
demographics
demographics <- unique(kane$race)
demo_count <- vector()
for (race in kane){
count <- sum(kane$race == demographics)
demo_count <- c(demo_count, count)
}
demo_count
setwd("C:/Users/kaybr/DAT204/dat-204R/wk9")
allegheny_county_dog_licenses <- read.csv("allegheny_county_dog_licenses.csv", stringsAsFactors=FALSE)
head(allegheny_county_dog_licenses)
# what is the most common breed of dog?
breeds <- unique(allegheny_county_dog_licenses$Breed)
head(breeds)
breed_counts <- vector()
for (breed in breeds) {
count <- sum(allegheny_county_dog_licenses$Breed == breed)
breed_counts <- c(breed_counts, count)
}
breed_counts
demographics <- unique(kane$race)
demo_count <- vector()
for (race in kane){
count <- sum(kane$race == demographics)
demo_count <- c(demo_count, count)
}
demographics
avg_patient <- c(mean(fac1$patient_count, na.rm = TRUE), mean(fac2$patient_count, na.rm = TRUE), mean(fac3$patient_count, na.rm = TRUE), mean(fac4$patient_count, na.rm = TRUE))
avg_patient # average patient counts for each facility
max(avg_patient) # Facility 3 had the most patients, on average
df <- data.frame("Facilities" = facilities, "Average Patients" = avg_patient)
head(df)
demo <- unique(kane$gender_race_group)
demo <- unique(kane$gender_race_group)
demo
gender_tf <- str_detect(kane$gender, 'F')
gender_df <- kane(gender_tf, )
gender_tf <- str_detect(kane$gender, 'F')
gender_df <- kane[gender_tf, ]
head(gender_df)
avg_patient <- c(mean(fac1$patient_count, na.rm = TRUE), mean(fac2$patient_count, na.rm = TRUE), mean(fac3$patient_count, na.rm = TRUE), mean(fac4$patient_count, na.rm = TRUE))
avg_patient # average patient counts for each facility
max(avg_patient) # Facility 3 had the most patients, on average
df <- data.frame("Facilities" = facilities, "Average_Patients" = avg_patient)
head(df)
qplot(month, data = kane)
ggplot(kane, aes(month, patient_count))
ggplot(kane, aes(month, patient_count)) +
geom(histogram)
ggplot(kane, aes(month, patient_count))
# female_tf <- str_detect(kane$gender, 'F')
# female_df <- kane[gender_tf, ]
# head(gender_df)
facilities <- unique(kane$facility)
gender_vec <- vector()
for (facility in facilities){
gen_count <- sum(kane[kane$gender == 'F' & kane$facility == facility, patient_count])
gender_vec <- c(gender_vec, gen_count)
}
# female_tf <- str_detect(kane$gender, 'F')
# female_df <- kane[gender_tf, ]
# head(gender_df)
facilities <- unique(kane$facility)
gender_vec <- vector()
for (facility in facilities){
gen_count <- sum(kane[kane$gender == 'F' & kane$facility == facility, 'patient_count'])
gender_vec <- c(gender_vec, gen_count)
}
gender_vec()
# female_tf <- str_detect(kane$gender, 'F')
# female_df <- kane[gender_tf, ]
# head(gender_df)
facilities <- unique(kane$facility)
gender_vec <- vector()
for (facility in facilities){
gen_count <- sum(kane[kane$gender == 'F' & kane$facility == facility, 'patient_count'])
gender_vec <- c(gender_vec, gen_count)
}
gender_vec
# female_tf <- str_detect(kane$gender, 'F')
# female_df <- kane[gender_tf, ]
# head(gender_df)
facilities <- unique(kane$facility)
female_vec <- vector()
for (facility in facilities){
fem_count <- sum(kane[kane$gender == 'F' & kane$facility == facility, 'patient_count'])
female_vec <- c(female_vec, fem_count)
}
female_vec
